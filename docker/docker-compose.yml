services:
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_METADATA_LOG_DIRS_CLEANUP_ENABLE: 'true'
      KAFKA_FORMAT_STORAGE_DIRS_ON_STARTUP: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data

  postgres:
    image: postgres:16
    hostname: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fintech_demo
      # Set wal_level to logical to support logical decoding for Debezium
#      POSTGRES_INITDB_ARGS: "--wal_level=logical"
    command: ["postgres", "-c", "wal_level=logical"]
    volumes:
      - postgres-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:latest
    hostname: pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8082:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@fintech.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./pgadmin-servers.json:/pgadmin4/servers.json
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Debezium Kafka Connect
  kafka-connect:
    image: debezium/connect:2.5
    hostname: kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/connectors || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: connect-cluster
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      
  # Grafana for Dashboard
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    depends_on:
      clickhouse:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clickhouse-datasource
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: grafana-clickhouse-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
     

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
      kafka-connect:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debezium
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  jobmanager:
    build:
      context: ./flink
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    volumes:
      - ../flink-jobs/target:/opt/flink/jobs
    command: jobmanager
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  taskmanager:
    build:
      context: ./flink
    depends_on:
      jobmanager:
        condition: service_healthy
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - TASK_MANAGER_NUMBER_OF_TASK_SLOTS=2
    volumes:
      - ../flink-jobs/target:/opt/flink/jobs
    command: taskmanager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/taskmanagers"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ClickHouse Data Warehouse with Kafka Integration
  clickhouse:
    build:
      context: ./clickhouse
      dockerfile: Dockerfile
    hostname: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    environment:
      CLICKHOUSE_DB: fintech_analytics
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse/init:/docker-entrypoint-initdb.d
    restart: unless-stopped

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.0
    hostname: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      - SPARK_MASTER_OPTS=-Dspark.driver.host=spark-master
    volumes:
      - ../spark-jobs:/opt/spark/jobs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5.0
    hostname: spark-worker
    depends_on:
      spark-master:
        condition: service_healthy
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_WEBUI_PORT=8081
    volumes:
      - ../spark-jobs:/opt/spark/jobs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  

  # Python Fintech Data Producer - Streaming Data Generator
  fintech-python-app:
    build:
      context: ../app-python
      dockerfile: Dockerfile
    hostname: fintech-python-app
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka-connect:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: fintech_demo
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONNECT_URL: http://kafka-connect:8083
      PRODUCTION_RATE: 5
      NUM_CUSTOMERS: 50
      LOG_LEVEL: INFO
    volumes:
      - ../app-python:/app
    working_dir: /app
    command: ["python", "main.py", "run-all", "--rate", "10", "--num-customers", "100"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import psycopg2; psycopg2.connect('postgresql://postgres:postgres@postgres:5432/fintech_demo').close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


volumes:
  kafka-data:
  postgres-data:
  pgadmin-data:
  grafana-data:
  clickhouse-data:
